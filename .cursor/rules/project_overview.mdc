---
alwaysApply: false
---

# 📚 프로젝트 개요 (front_6th_chapter1-2)

> 이 문서는 *SPA 방식*으로 구현된 리액트-유사 프레임워크 프로젝트의 **전체 구조**와 **핵심 모듈**을 한눈에 파악할 수 있도록 정리한 가이드입니다. 새 기능을 추가하거나 버그를 수정할 때 이 문서를 참고하여 방향을 잃지 마세요.

---

## 1. 기술 스택

| 영역        | 사용 기술                                                               |
| ----------- | ----------------------------------------------------------------------- |
| 빌드 도구   | Vite, pnpm                                                              |
| UI & 스타일 | Tailwind CSS (utility-first), SVG 아이콘                                |
| 언어        | **JavaScript(ES2022)** + **TypeScript**(선별 적용)                      |
| 테스트      | Vitest(react-testing-library), Playwright e2e, MSW(Mock Service Worker) |
| 상태 관리   | Flux-style 커스텀 스토어(`createStore`)                                 |
| 네트워킹    | fetch 기반 `productApi`, 서비스 레이어 `services/`                      |
| 라우팅      | 커스텀 SPA 라우터(`Router.js`)                                          |

---

## 2. 폴더 구조 (요약)

```
front_6th_chapter1-2/
├─ public/           # 정적 자산 (SVG, mockServiceWorker 등)
├─ src/
│  ├─ api/           # 외부 API 호출 함수
│  ├─ components/    # 재사용 가능한 UI 컴포넌트
│  ├─ lib/           # 핵심 라이브러리(가상 DOM, 라우터, 스토어 등)  ← TypeScript 비중 ↑
│  ├─ pages/         # 페이지 단위 컴포넌트 (Route target)
│  ├─ router/        # 라우터 헬퍼(HOC 포함)
│  ├─ services/      # 비즈니스 로직 (카트, 상품)
│  ├─ stores/        # 전역 상태(Flux 패턴)
│  ├─ storage/       # localStorage 래퍼
│  ├─ mocks/         # MSW 핸들러 & 더미 데이터
│  ├─ utils/         # 범용 유틸리티
│  └─ __tests__/     # 단위 테스트
└─ ...              # 설정, 테스트, 문서
```

> **참고:** `lib/` 하위 파일 중 `*.ts` 확장자는 모두 과제 수행자가 직접 작성한 TypeScript 모듈입니다.

---

## 3. 주요 디렉터리 상세

### 3.1 `src/api`

| 파일            | 설명                                                      |
| --------------- | --------------------------------------------------------- |
| `productApi.js` | 상품 검색/조회 API 래퍼. `fetch` 요청과 예외 처리를 담당. |

### 3.2 `src/components`

> UI 단위 컴포넌트. Tailwind 클래스를 사용해 스타일링했습니다.

| 컴포넌트                                    | 역할                                                |
| ------------------------------------------- | --------------------------------------------------- |
| `ProductCard.jsx`                           | 상품 썸네일 · 가격 · 브랜드 · “장바구니 담기” 버튼. |
| `ProductDetail.jsx`                         | 상품 상세 정보 및 구매 유도 CTA.                    |
| `ProductList.jsx`                           | 무한 스크롤 목록 / 스켈레톤 UI.                     |
| `CartModal.jsx` / `CartItem.jsx`            | 장바구니 모달 및 아이템 행.                         |
| `SearchBar.jsx`                             | 키워드 검색 입력 + 아이콘.                          |
| `ErrorContent.jsx`                          | 에러 상태 뷰(아이콘 + 메시지).                      |
| `Toast.jsx`                                 | 글로벌 토스트 알림(`uiStore`와 연동).               |
| `Footer.jsx`, `Logo.jsx`, `PublicImage.jsx` | 보조 UI.                                            |

### 3.3 `src/lib` _(TypeScript 중심)_

| 파일                                   | 핵심 기능                                              |
| -------------------------------------- | ------------------------------------------------------ |
| `createElement.ts`                     | 가상 DOM → 실제 DOM 변환. 이벤트 바인딩.               |
| `createVNode.ts` / `normalizeVNode.ts` | JSX → _VNode_ 구조체 생성/정규화.                      |
| `renderElement.ts`                     | VNode 트리를 루트 DOM에 렌더.                          |
| `eventManager.ts`                      | 전역 이벤트 위임(성능 최적화).                         |
| `createObserver.js`                    | 퍼블리셔-서브스크라이버 구현.                          |
| `createStore.js`                       | Redux-lite 스토어 (`dispatch`, `subscribe`).           |
| `Router.js`                            | History API 기반 SPA 라우터 (동적 파라미터·쿼리 지원). |

### 3.4 `src/pages`

| 페이지                  | 경로                                  | 설명                |
| ----------------------- | ------------------------------------- | ------------------- |
| `HomePage.jsx`          | `/`                                   | 상품 리스트 & 검색. |
| `ProductDetailPage.jsx` | `/product/:id`                        | 상품 상세.          |
| `NotFoundPage.jsx`      | `*`                                   | 404 처리.           |
| `PageWrapper.jsx`       | 공통 레이아웃 · 헤더 · 모달 · 토스트. |

### 3.5 `src/services`

| 서비스              | 책임                                                |
| ------------------- | --------------------------------------------------- |
| `productService.js` | API 응답 캐싱·가공 및 `productStore` 업데이트.      |
| `cartService.js`    | 장바구니 추가/삭제/수량변경 + `cartStore` 업데이트. |
| `index.js`          | 서비스 모듈 재-export.                              |

### 3.6 `src/stores` (+ `storage/`)

| 스토어            | 상태                             | 초기화                          |
| ----------------- | -------------------------------- | ------------------------------- |
| `productStore.js` | `products`, `isLoading`, `error` | 빈 배열.                        |
| `cartStore.js`    | `items`, `totalPrice`            | `cartStorage`(localStorage) 값. |
| `uiStore.js`      | `toast`, `modal` 가시성 등       | 기본 false.                     |

`storage/` 폴더는 _영속화_ 책임(`cartStorage.js`)만 수행하며, 스토어와 서비스의 의존성을 분리합니다.

### 3.7 테스트 & 목킹

- `__tests__/` : Jest + _Testing Library_ 기반 단위 테스트.
- `e2e/` : Playwright 시나리오.
- `mocks/` : MSW 핸들러(`handlers.js`)와 더미 JSON(`items.json`).

---

## 4. 데이터 흐름

1. **사용자 인터랙션** → 컴포넌트 핸들러 호출.
2. **서비스 레이어** (`services/*`)에서 API 호출(`api/*`) 또는 스토어 액션 디스패치.
3. **스토어 업데이트** (`createStore`) → **Observer 패턴**으로 구독 컴포넌트 리렌더링.
4. **VNode** 생성(JSX) → `lib/` 렌더러가 DOM을 갱신.

> React의 _setState → Virtual DOM → Diff_ 과정을 **경량화**하여 직접 구현한 구조입니다.

---

## 5. 실행 & 빌드 스크립트

```bash
# 로컬 개발
pnpm dev

# 테스트
pnpm test       # 단위 테스트
pnpm e2e        # Playwright

# 프로덕션 빌드
pnpm build
```
